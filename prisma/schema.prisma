datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  type      Role     @default(SANTRI)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher   Teachers?
  santri    Santris?
  parent    Parents?

  sentNotifications     Notifications[] @relation("Sender")
  receivedNotifications Notifications[] @relation("Receiver")
}

model Teachers {
  id        String      @id @default(cuid())
  name      String
  userId    String      @unique
  user      Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      TeacherRole @default(ASATIDZ)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  divisions TeacherDivisions[]
  classes   TeacherClasses[]
  evaluations Evaluations[]
}

model Divisions {
  id        String   @id @default(cuid())
  name      Field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes  Classes[]
  teachers TeacherDivisions[]
}

model TeacherDivisions {
  id         String   @id @default(cuid())
  teacherId  String
  divisionId String
  role       TeacherRole @default(ASATIDZ)
  createdAt  DateTime @default(now())

  teacher  Teachers  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  division Divisions @relation(fields: [divisionId], references: [id], onDelete: Cascade)

  @@unique([teacherId, divisionId])
}

model Classes {
  id         String    @id @default(cuid())
  name       String
  divisionId String
  division   Divisions @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  teachers TeacherClasses[]
  santris  SantriClasses[]
}

model TeacherClasses {
  id        String   @id @default(cuid())
  teacherId String
  classId   String
  createdAt DateTime @default(now())

  teacher Teachers @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  class   Classes  @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([teacherId, classId])
}

model Santris {
  id        String   @id @default(cuid())
  name      String
  userId    String   @unique
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  SantriCategory @default(REGULER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes  SantriClasses[]
  parents  ParentChildren[]
  coupons  Coupon[]
  evaluations Evaluations[]
}

model SantriClasses {
  id        String   @id @default(cuid())
  santriId  String
  classId   String
  createdAt DateTime @default(now())

  santri Santris @relation(fields: [santriId], references: [id], onDelete: Cascade)
  class  Classes @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([santriId, classId])
}

model ParentChildren {
  id        String   @id @default(cuid())
  parentId  String
  santriId  String
  createdAt DateTime @default(now())

  parent Parents @relation(fields: [parentId], references: [id], onDelete: Cascade)
  santri Santris @relation(fields: [santriId], references: [id], onDelete: Cascade)
}

model Parents {
  id       String           @id @default(cuid())
  userId   String           @unique
  user     Users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  children ParentChildren[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifications {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  message    String
  type       String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   Users @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver Users @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Evaluations {
  id        String   @id @default(cuid())
  santriId  String
  teacherId String
  field     Field
  score     Int
  type      String
  createdAt DateTime @default(now())

  santri  Santris  @relation(fields: [santriId], references: [id], onDelete: Cascade)
  teacher Teachers @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Coupon {
  id        String   @id @default(cuid())
  santriId  String
  value     Int
  expiresAt DateTime
  isUsed    Boolean  @default(false)

  santri Santris @relation(fields: [santriId], references: [id], onDelete: Cascade)
}

enum SantriCategory {
  REGULER
  AKSELERASI
}

enum Field {
  TAHFIZH
  IT
  KARAKTER
  BAHASA
}

enum Role {
  ADMIN
  KADIV
  ASATIDZ
  SANTRI
  WALSAN
}

enum TeacherRole {
  ASATIDZ
  KADIV
}
